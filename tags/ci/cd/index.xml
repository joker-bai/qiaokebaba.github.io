<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>CI/CD on 十点运维吧-Linux|Kubernetes|Docker|Prometheus|Python|Golang|云原生|SRE</title>
    <link>https://www.coolops.cn/tags/ci/cd/</link>
    <description>Recent content in CI/CD on 十点运维吧-Linux|Kubernetes|Docker|Prometheus|Python|Golang|云原生|SRE</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>qiaokebaba@163.com (乔克叔叔)</managingEditor>
    <webMaster>qiaokebaba@163.com (乔克叔叔)</webMaster>
    <copyright>&amp;copy;{year}, All Rights Reserved</copyright>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    
        <atom:link href="https://www.coolops.cn/tags/ci/cd/index.xml" rel="self" type="application/rss+xml" />
    
    
    

      
      <item>
        <title>基于Jenkins&#43;Argocd&#43;Argo Rollouts的CI/CD实现并用金丝雀发布</title>
        <link>https://www.coolops.cn/posts/jenkins-argocd-argo-rollouts/</link>
        <pubDate>Wed, 16 Dec 2020 15:15:16 +0800</pubDate>
        <author>qiaokebaba@163.com (乔克叔叔)</author>
        <atom:modified>Mon, 21 Dec 2020 17:34:20 +0800</atom:modified>
        <guid>https://www.coolops.cn/posts/jenkins-argocd-argo-rollouts/</guid>
        <description>本文主要介绍使用Jenkins配合argocd以及argo rollouts实现CI/CD。其中jenkins配合argocd做CI/CD前面已经介绍过了，这里不再赘述，不懂的地方可以移步《使用Jenkins和Argocd实现CI/CD》。
本篇文章新增了如下几个功能：
 优化argocd的触发CD的速度 使用argo rollouts进行金丝雀发布 给代码仓库打tag  优化Argocd触发CD的速度 Argo CD每三分钟轮询一次Git存储库，以检测清单的变化。为了消除轮询带来的延迟，可以将API服务器配置为接收Webhook事件。Argo CD支持来自GitHub，GitLab，Bitbucket，Bitbucket Server和Gogs的Git Webhook通知，更多点击官网。
我这里使用Gitlab作为仓库地址。
（1）在argocd中配置webhook token
使用kubectl edit secret argocd-secret -n argocd命令进行配置：
apiVersion: v1kind: Secretmetadata:name: argocd-secretnamespace: argocdtype: Opaquedata:...stringData:# gitlab webhook secretwebhook.gitlab.secret: coolops配置完点击保存会自动生成一个secret，如下：
# kubectl describe secret argocd-secret -n argocdName: argocd-secretNamespace: argocdLabels: app.kubernetes.io/name=argocd-secretapp.kubernetes.io/part-of=argocdAnnotations: Type: OpaqueData====admin.passwordMtime: 20 bytesserver.secretkey: 44 bytestls.crt: 1237 bytestls.key: 1679 byteswebhook.gitlab.secret: 7 bytesadmin.password: 60 bytes（2）在gitlab的代码仓库配置webhook，如下：
由于集群内部证书是无效证书，所有要把Enabled SSL去掉，如下：
然后点击保存，点击测试，看是否链接成功。如果有如下提示则表示webhook配置没问题了。
现在可以进行修改gitlab仓库，观察是否一提交，argocd那边就可以响应了。
使用argo rollouts进行金丝雀发布 关于argo rollouts的更多介绍可以查看之前的文章《使用argo-rollouts实现金丝雀发布》。</description>
        
        <dc:creator>乔克叔叔</dc:creator>
        <media:content url="https://www.coolops.cnimages/kubernetes/devops.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>kubernetes</category>
            
          
            
              <category>devops</category>
            
          
            
              <category>CI/CD</category>
            
          
            
              <category>argocd</category>
            
          
            
              <category>argo-rollouts</category>
            
          
        
        
          
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>在kubernetes中部署Jenkins并配置动态生成slave</title>
        <link>https://www.coolops.cn/posts/kubernetes-jenkins-install/</link>
        <pubDate>Thu, 10 Dec 2020 08:25:12 +0800</pubDate>
        <author>qiaokebaba@163.com (乔克叔叔)</author>
        <atom:modified>Thu, 10 Dec 2020 08:31:22 +0800</atom:modified>
        <guid>https://www.coolops.cn/posts/kubernetes-jenkins-install/</guid>
        <description>一、动态生成Slave 1.1、简介 之前我们都是在物理机或者虚拟机上部署jenkins，但是这种部署方式会有一些难点，如下：
 主 Master 发生单点故障时，整个流程都不可用了 每个 Slave 的配置环境不一样，来完成不同语言的编译打包等操作，但是这些差异化的配置导致管理起来非常不方便，维护起来也是比较费劲 资源分配不均衡，有的 Slave 要运行的 job 出现排队等待，而有的 Slave 处于空闲状态 资源有浪费，每台 Slave 可能是物理机或者虚拟机，当 Slave 处于空闲状态时，也不会完全释放掉资源。  正因为上面的这些种种痛点，我们渴望一种更高效更可靠的方式来完成这个 CI/CD 流程，而 Docker 虚拟化容器技术能很好的解决这个痛点，又特别是在 Kubernetes 集群环境下面能够更好来解决上面的问题，下图是基于 Kubernetes 搭建 Jenkins 集群的简单示意图：
从图上可以看到 Jenkins Master 和 Jenkins Slave 以 Pod 形式运行在 Kubernetes 集群的 Node 上，Master 运行在其中一个节点，并且将其配置数据存储到一个 Volume 上去，Slave 运行在各个节点上，并且它不是一直处于运行状态，它会按照需求动态的创建并自动删除。
这种方式的工作流程大致为：当 Jenkins Master 接受到 Build 请求时，会根据配置的 Label 动态创建一个运行在 Pod 中的 Jenkins Slave 并注册到 Master 上，当运行完 Job 后，这个 Slave 会被注销并且这个 Pod 也会自动删除，恢复到最初状态。
这种方式部署给我们带来如下好处：
 服务高可用，当 Jenkins Master 出现故障时，Kubernetes 会自动创建一个新的 Jenkins Master 容器，并且将 Volume 分配给新创建的容器，保证数据不丢失，从而达到集群服务高可用。 动态伸缩，合理使用资源，每次运行 Job 时，会自动创建一个 Jenkins Slave，Job 完成后，Slave 自动注销并删除容器，资源自动释放，而且 Kubernetes 会根据每个资源的使用情况，动态分配 Slave 到空闲的节点上创建，降低出现因某节点资源利用率高，还排队等待在该节点的情况。 扩展性好，当 Kubernetes 集群的资源严重不足而导致 Job 排队等待时，可以很容易的添加一个 Kubernetes Node 到集群中，从而实现扩展。  1.</description>
        
        <dc:creator>乔克叔叔</dc:creator>
        <media:content url="https://www.coolops.cnimages/kubernetes/jenkins.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>kubernetes</category>
            
          
            
              <category>jenkins</category>
            
          
            
              <category>devops</category>
            
          
            
              <category>CI/CD</category>
            
          
        
        
          
            
          
        
        
          
            
          
        
      </item>
      

    
  </channel>
</rss>