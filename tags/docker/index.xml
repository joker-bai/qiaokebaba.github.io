<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>docker on 十点运维吧-Linux|Kubernetes|Docker|Prometheus|Python|Golang|云原生|SRE</title>
    <link>https://www.coolops.cn/tags/docker/</link>
    <description>Recent content in docker on 十点运维吧-Linux|Kubernetes|Docker|Prometheus|Python|Golang|云原生|SRE</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>qiaokebaba@163.com (乔克叔叔)</managingEditor>
    <webMaster>qiaokebaba@163.com (乔克叔叔)</webMaster>
    <copyright>&amp;copy;{year}, All Rights Reserved</copyright>
    <lastBuildDate>Wed, 20 Jan 2021 11:03:08 +0800</lastBuildDate>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    
        <atom:link href="https://www.coolops.cn/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    
    
    

      
      <item>
        <title>如何保证Docker镜像安全?</title>
        <link>https://www.coolops.cn/posts/docker-image-secrut/</link>
        <pubDate>Wed, 20 Jan 2021 11:03:08 +0800</pubDate>
        <author>qiaokebaba@163.com (乔克叔叔)</author>
        <atom:modified>Wed, 20 Jan 2021 11:03:08 +0800</atom:modified>
        <guid>https://www.coolops.cn/posts/docker-image-secrut/</guid>
        <description>容器为我们提供应用运行环境，所以在制作镜像的时候应该重点关注镜像安全问题，而不是随意制作。
这里总结以下几点：
 以非root用户运行 保持镜像最小化 对镜像进行安全扫描  以非root用户运行镜像 在制作镜像的时候，默认都是以root用户在容器中运行，虽然此root用户和服务器上的root用户有区别，但是黑客可以利用这个用户来获取API密钥，令牌，密码等私密信息，或者通过提权等干扰服务器主机。
所以我们在制作镜像的时候要使用非root用户，比如下面一个java服务：
FROM openjdk:8-jdk-oraclelinux7RUN useradd -m -d /home/joker -u 1000 -U joker &amp;amp;&amp;amp; \yum install -y procpsUSER jokerADD --chown=joker springboot-helloworld.jar /home/joker/app.jarEXPOSE 8080WORKDIR /home/jokerCMD exec java -Djava.security.egd=file:/dev/./urandom -jar app.jar运行容器后，即可看到是以joker用户起的应用。保持镜像最小化 镜像并非越大越好，也并非越小越好，适合当前需求的镜像才是最好。不过在制作镜像的时候要坚持最小化原则，只安装需要的软件和包。
可以通过docker images 查看镜像大小，如下：
ubuntu latest f643c72bc252 7 weeks ago 72.9MB对镜像进行安全扫描 把容器类比于主机，那么容器的安全和主机的安全同等重要，所以要镜像对每一个镜像进行安全扫描，发现高危漏洞及时打补丁，这样才能随时保持一个相对安全的运行环境。
目前Harbor 2.0以上已经可以自定义镜像扫描规则，也可以定义拦截规则，可以有效的发现镜像漏洞，其他公有仓库也有类似的功能。当然我们还可以在做CI的阶段对制品镜像进行扫描，通过的才交付。具体怎么做根据不同的需求而定。</description>
        
        <dc:creator>乔克叔叔</dc:creator>
        <media:content url="https://www.coolops.cnimages/kubernetes/docker.jpg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>docker</category>
            
          
        
        
          
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>Harbor：在云原生中使用，附安装</title>
        <link>https://www.coolops.cn/posts/harbor/</link>
        <pubDate>Sat, 05 Dec 2020 10:51:24 +0800</pubDate>
        <author>qiaokebaba@163.com (乔克叔叔)</author>
        <atom:modified>Thu, 10 Dec 2020 08:31:22 +0800</atom:modified>
        <guid>https://www.coolops.cn/posts/harbor/</guid>
        <description>内容主要源自邹佳在云原生社区的分享。
 Harbor 是一个用于存储和分发Docker 镜像的企业级Registry 服务器，由vmware开源，是一个可信的云原生制品仓库，用来存储、签名、管理相关的内容。
Harbor的一切设计都是围绕了云原生展开的，并且会在这个方向一直坚持下去。
在云原生下，镜像就是命脉，一切应用都是围绕着镜像，可以说镜像技术加速了云原生的发展。
那么Harbor在镜像方面做了哪些呢？
让镜像分发更高效 （1）基于策略的内容复制机制 Harbor支持多种过滤器（镜像库、标签等）与多种触发模式（手动、定时等）来实现镜像的推送和拉取。
 初始的时候进行全量拉取 然后再通过增量拉取  在大集群，多机房的情况下，可以使用主从模式（中心-边缘模式）来进行镜像的分发。
（2）提供项目级别的缓存能力 最近开源圈热论的话题就是DockerHub限速问题s，不过“上有政策，下有对策”，Harbor就可以有效解决这个问题。
通过Harbor缓存下来的制品与“本地”制品无异，而且Harbor方面相关的管理策略也可以应用到缓存的镜像上，比如配额、扫描等。目前仅支持上游的DockerHub和其他的Harbor。
在配置缓存时要注意几点：
 要使用缓存功能，则必须在新建项目的时候选择启用，切该项目不可推送 已创建的普通项目无法直接转为缓存项目 Pull镜像的路径有专门的格式。docker pull &amp;lt;harbor-host&amp;gt;/[cache-project-name]/&amp;lt;repository&amp;gt;_path，比如docker pull goharbor.io/my_cache_pro/library/nginx:latest  （3）可以使用P2P进行镜像预热  PS：这里的P2P不是网贷机构，不会暴雷的。
 那什么是P2P技术呢？
在C/S模式中，数据的分发采用专门的服务器，多个客户端都从此服务器获取数据。这种模式的优点是：数据的一致性容易控制，系统也容易管理。但是此种模式的缺点是：因为服务器的个数只有一个(即便有多个也非常有限)，系统容易出现单一失效点；单一服务器面对众多的客户端，由于CPU能力、内存大小、网络带宽的限制，可同时服务的客户端非常有限，可扩展性差。
P2P技术正是为了解决这些问题而提出来的一种对等网络结构。在P2P网络中，每个节点既可以从其他节点得到服务，也可以向其他节点提供服务。这样，庞大的终端资源被利用起来，一举解决了C/S模式中的两个弊端。
Harbor也充分利用了这种技术，将所选镜像提前分发到P2P网络中，以便客户端拉取的时候直接从P2P网络中拉取。
  基于策略实现自动化
   Repository过滤器 Tag过滤器 标签（Label）过滤器 漏洞状态条件 签名状态条件    基于事件触发或定时触发
  Harbor目前仅支持：
 Dragonfly。是阿里自研并捐献给 CNCF 的 P2P 文件分发系统。 Kraken。是 Uber 开源的点对点（P2P）Docker 容器仓库。  让镜像分发更安全 容器实际上是不透明的，被封装成一个个繁琐的镜像。当越来越多的镜像被创建时，没有人能确定镜像里到底封装了什么，所以日常使用的镜像都面临着严重的安全问题。
Harbor在安全方面做了严格的把关。
（1）对镜像进行签名  基于开源的Notary实现镜像的签名   基于GPG实现对Helm Chart的签名支持  （2）对镜像进行漏洞扫描  通过插件化接入扫描器，对镜像进行漏洞扫描   可以生成相应的扫描报告，以便与管理相关漏洞信息和了解安全威胁程度  （3）通过策略限制不安全镜像分发 可以在项目里设置相关的安全策略，以阻止不合安全规范的镜像分发。
 基于内容信任，仅允许通过认证的镜像分发 基于危害级别，可以设置危害级别限制镜像分发  （4）通过规则来限制Tag不被覆盖或删除 默认情况下Harbor里的镜像是可以被覆盖和删除的，不过可以添加一些规则来保护一些Tag不被删除，比如latest的tag。</description>
        
        <dc:creator>乔克叔叔</dc:creator>
        <media:content url="https://www.coolops.cnimages/kubernetes/harbor.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>Cloud Native</category>
            
          
            
              <category>Harbor</category>
            
          
            
              <category>kubernetes</category>
            
          
            
              <category>docker-compose</category>
            
          
            
              <category>docker</category>
            
          
        
        
          
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>二进制安装Kubernetes集群</title>
        <link>https://www.coolops.cn/posts/binary-install-kubernetes/</link>
        <pubDate>Fri, 04 Dec 2020 09:40:07 +0800</pubDate>
        <author>qiaokebaba@163.com (乔克叔叔)</author>
        <atom:modified>Thu, 10 Dec 2020 08:31:22 +0800</atom:modified>
        <guid>https://www.coolops.cn/posts/binary-install-kubernetes/</guid>
        <description>基础规划 1、IP规划
   主机名 IP 配置 软件     master-k8s 10.1.10.128 2C4G etcd,apiserver,controller-manager,scheduler   node01-k8s 10.1.10.129 2C4G etcd,docker,kubelet,kube-proxy   node02-k8s 10.1.10.130 2C4G etcd,docker,kubelet,kube-proxy    2、软件规划
   软件名 版本     etcd 3.3.18   docker-ce 19.03.5-3   cfssl 1.2.0   kubernetes 1.16.4   flannel 0.11.0   cni 0.8.3    3、目录规划
   目录名 用途     /var/log/kubernetes/ 存储日志   /root/kubernetes/install 安装软件目录   /opt/kubernetes K8S项目部署目录，其中ssl是证书目录，bin是二进制目录，config是配置文件目录   /opt/etcd Etcd项目部署目录，子目录功能如上   /opt/cni cni二进制文件保存目录   /opt/kubernetes/ssl 证书生成目录   /opt/kubernetes/kubeconfig kubeconfig统一生成目录   /opt/kubernetes/system 系统组件YAML文件存储目录    mkdir /var/log/kubernetes /root/kubernetes/{ssl,install,kubeconfig} /root/kubernetes/ssl /opt/etcd/{bin,config,ssl} /opt/kubernetes/{bin,config,ssl} /opt/cni/bin -p 主机初始化配置 2、设置hostname</description>
        
        <dc:creator>乔克叔叔</dc:creator>
        <media:content url="https://www.coolops.cnimages/kubernetes/kubernetes.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>kubernetes</category>
            
          
            
              <category>docker</category>
            
          
        
        
        
      </item>
      

    
  </channel>
</rss>